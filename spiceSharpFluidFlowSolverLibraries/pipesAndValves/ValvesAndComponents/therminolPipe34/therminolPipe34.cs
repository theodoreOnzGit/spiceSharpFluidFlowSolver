using SpiceSharp.Behaviors;
using SpiceSharp.Components.therminolPipe34Behaviors;
using SpiceSharp.ParameterSets;
using SpiceSharp.Simulations;
using EngineeringUnits;
using EngineeringUnits.Units;
using SharpFluids;

namespace SpiceSharp.Components
{
    /// <summary>
    /// A nonlinear resistor.
    /// </summary>
    /// <seealso cref="Component" />
    public class therminolPipe34 : TherminolPipe,
        IParameterized<BaseParameters>
    {

		// copied this from the nonlinear resistor, don't change!
		// but modified this to make it work without all that
		// autogenerated code
        public BaseParameters Parameters { get; set; } = new BaseParameters();

		// copied this from the nonlinear resistor, don't change!
        public therminolPipe34(string name, string nodeA, string nodeB) 
			: base(name, nodeA, nodeB)
        {
        }

		// Now, I want a constructor that can work without connecting
		// node A to B
        public therminolPipe34(string name) : base(name){
		}



		public override ThermalConductivity getFluidThermalConductivity(){
			throw new NotImplementedException();
		}

		public override SpecificHeatCapacity getFluidHeatCapacity(){
			throw new NotImplementedException();
		}

		public override DynamicViscosity getFluidDynamicViscosity(){
			throw new NotImplementedException();
		}

		public override double getFluidPrandtl(){
			throw new NotImplementedException();
		}

		public override Length componentLength { get; set; } 

		public override int numberOfSegments { get; set; } = 5;


		public override IList<EngineeringUnits.Temperature> 
			temperatureList { get; set; } = 
			new List<EngineeringUnits.Temperature>();

		public override Length getHydraulicDiameter(){
			return 0.5*entranceHydraulicDiameter + 0.5*exitHydraulicDiameter;
		}
		
		public override void setHydraulicDiameters(){
			this.entranceHydraulicDiameter = new Length(2.39e-2, LengthUnit.Meter);
			this.exitHydraulicDiameter = new Length(2.39e-2, LengthUnit.Meter);
		}

		public override void setComponentLength(){
			this.componentLength = new Length(0.55245, LengthUnit.Meter);
		}

		public override Length getSurfaceRoughness(){
			// using drawn copper aboslute roughness in mm
			// from engineeringtoolbox.com
			Length absoluteRoughness = new Length(0.002, LengthUnit.Meter);
			return absoluteRoughness;
		}

		public override double getFormLossCoefficientK(){
			return 4.25;
		}

		public override KinematicViscosity getFluidKinematicViscosity(){
			throw new NotImplementedException();
		}

		public override Density getFluidDensity(){
			throw new NotImplementedException();
		}


    }
}
