using SpiceSharp.Behaviors;
using SpiceSharp.Components.TherminolPipeBehaviors;
using SpiceSharp.ParameterSets;
using SpiceSharp.Simulations;
using EngineeringUnits;
using EngineeringUnits.Units;
using SharpFluids;

namespace SpiceSharp.Components
{
    /// <summary>
    /// An abstract base class for all Therminol Based Components
    /// </summary>
    /// <seealso cref="Component" />
    public abstract class TherminolPipe : Component,
        IParameterized<BaseParameters>,
		SpiceSharp.Entities.IFluidEntity,
		SpiceSharp.Entities.IHeatTransferFluidEntity
    {

		// copied this from the nonlinear resistor, don't change!
		// but modified this to make it work without all that
		// autogenerated code
        public SpiceSharp.Components.TherminolPipeBehaviors.BaseParameters 
			Parameters { get; set; } 
		= new SpiceSharp.Components.TherminolPipeBehaviors.BaseParameters();


		// copied this from the nonlinear resistor, don't change!
        public TherminolPipe(string name, string nodeA, string nodeB) : base(name, 2)
        {
            Connect(nodeA, nodeB);
			this.setComponentLength();
			this.setHydraulicDiameters();
			this.setTemperatureList(this.getInitialTemperature());
			// i'm going to set some defaults for this system
        }

		// Now, I want a constructor that can work without connecting
		// node A to B
        public TherminolPipe(string name) : base(name, 2){
			this.setComponentLength();
			this.setHydraulicDiameters();
			this.setTemperatureList(this.getInitialTemperature());
			Console.WriteLine("\n Please Remember to call the Connect(inlet,outlet) method)\n");
			Console.WriteLine("ie ObjectName.Connect('inletName','outletName'); \n");
			// i'm going to set some defaults for this system
		}


		// copied this from the nonlinear resistor, don't change!
        public override void CreateBehaviors(ISimulation simulation)
        {
            var behaviors = new BehaviorContainer(Name);
            var context = new ComponentBindingContext(this, simulation, behaviors);
            if (simulation.UsesBehaviors<IBiasingBehavior>())
                behaviors.Add(new BiasingBehavior(Name, context));
            simulation.EntityBehaviors.Add(behaviors);
        }


		// these two additional methods fulfil the IFluidEntity 
		// interface
		// Warning: none of these methods are thread safe. 
		// only one method should be used at one time per instance

		public Pressure getPressureDrop(MassFlow massFlowrate){
			return Parameters.getPressureDrop(massFlowrate);
		}

		public SpecificEnergy getKinematicPressureDrop(
				MassFlow massFlowrate){
			return Parameters.getKinematicPressureDrop(massFlowrate);
		}

		public MassFlow getMassFlowRate(SpecificEnergy kinematicPressureDrop){
			// this supposes that a kinematicPressureDrop is supplied over this pipe
			// and we want to get the mass flowrate straightaway.
			
			return Parameters.getMassFlowRate(kinematicPressureDrop);
		}

		public MassFlow getMassFlowRate(Pressure dynamicPressureDrop){
			return Parameters.getMassFlowRate(dynamicPressureDrop);
		}


		private Length _componentLength;
		public virtual Length componentLength { 
			get{
				return this._componentLength;
			}
			set{
				if(value.As(LengthUnit.Meter) <= 0)
					throw new InvalidOperationException("diameter <= 0 m");
				this._componentLength = value;
				this.setAllPipeDimensions(this.numberOfSegments);
			}
		}

		// you must set the componentLength property below
		public abstract void setComponentLength();

		public virtual Length getComponentLength(){
			return this.componentLength;
		}


		// you must set the entranceHydraulicDiameter and
		// exitHydraulicDiameter properties in the method below...
		public abstract void setHydraulicDiameters();

		public virtual Length getHydraulicDiameter(){

			// for this, we use the getXSarea method to get the weighted
			// XS area with boussinesq approximation
			//
			// and then we get the hydraulic diameter
			Area hydraulicDiameterSquared = 
				this.getXSArea()*4.0/Math.PI;

			Length seriesHydraulicDiameter = 
				hydraulicDiameterSquared.Sqrt();

			return seriesHydraulicDiameter;
		}



		/**********************************************************************
		 * This section contains data to help deal with pipes which may have
		 * different entrance and exit areas or hydraulic diameters.
		 * 
		 * i have two properties, entrance and exit hydraulic diameters,
		 * i want it to autocalculate the diameterList once i set the properties
		 * but at the same time i want a compiler error if the user doesn't
		 * set it at all
		 *
		 * Thus i will just leave getHydraulicDiameter() as abstract
		 * but entrance and exit hydraulic diameter is virtual
		 *
		 *
		 * ********************************************************************/

		private Length _entranceHydraulicDiameter
			= new Length(2.79e-2,LengthUnit.Meter);
		public virtual Length entranceHydraulicDiameter { 
			get{
				return this._entranceHydraulicDiameter;
			}
			set{
				if(value.As(LengthUnit.Meter) <= 0)
					throw new InvalidOperationException("diameter <= 0 m");
				this._entranceHydraulicDiameter = value;
				this.setAllPipeDimensions(this.numberOfSegments);
			}
		}

		private Length _exitHydraulicDiameter
			= new Length(2.79e-2, LengthUnit.Meter);
		public virtual Length exitHydraulicDiameter { 
			get{
				return this._exitHydraulicDiameter;
			}
			set{
				if(value.As(LengthUnit.Meter) <= 0)
					throw new InvalidOperationException("diameter <= 0 m");
				this._exitHydraulicDiameter = value;
				this.setAllPipeDimensions(this.numberOfSegments);
			}
		}

		private Length getSegmentInterpolationLength(int segmentNumber){
			return this.getComponentLength()/this.numberOfSegments 
				*(segmentNumber - 0.5);
		}

		private Length getSegmentLinearInterpolatedDiameter(int segmentNumber){
			double interpolationSlope;
			interpolationSlope = (this.exitHydraulicDiameter 
					- this.entranceHydraulicDiameter)/(
						this.getComponentLength() - 
						this.entranceLengthValue);

			Length interpolationLength = this.getSegmentInterpolationLength(
					segmentNumber);

			return (interpolationLength - 
					this.entranceLengthValue)*interpolationSlope
				+ entranceHydraulicDiameter;

		}

		public virtual Length entranceLengthValue { get; set; } = 
			new Length(0.0, LengthUnit.Meter);

		public virtual Area getXSArea(){
			// now to get cross sectional area, there are a few things i need
			// to do
			//
			// first thing is calculate A^2, 
			// this has units of AreaMomentOfInertia m^4
			// so i can use that unit
			// we also need the K_i value, K_series value and etc.
			// we also need to weigh by density, but doesn't really matter
			// due to boussinesq approximation.
			// so i'm not going to bother getting density

			// first i generate a list of darcy K values
			IList<double> DarcyKList = 
				this.getDarcyKList(this.hydraulicDiameterList);
			
			// secondly let me get a list of lengthToDiameter Ratios
		
			IList<Length> hydraulicDiameterList = this.hydraulicDiameterList;
			IList<Length> lengthList = this.lengthList;



			IList<double> lengthToDiameterList = 
				this.getLengthToDiameterList(lengthList,hydraulicDiameterList);

			// thirdly, the big K, which is for me, just K/noOfSegments
			double kSegment = this.getFormLossCoefficientK()/
				this.numberOfSegments;
			// lastly, my list of area squared
			//

			IList<AreaMomentOfInertia> areaSqList;
			IList<AreaMomentOfInertia> getAreaSqList(IList<Area>
					areaList){
				IList<AreaMomentOfInertia> areaSqList = 
					new List<AreaMomentOfInertia>();
				foreach (Area segmentArea in areaList)
				{
					areaSqList.Add(segmentArea.Pow(2));
				}
				return areaSqList;
			}

			areaSqList = getAreaSqList(this.areaList);


			// now we will get to calculate the xsArea finally
			// 
			//
			// Here i calculate
			// the sum of
			/// (kDarcy*L/D + kForm)
			double xsAreaSqWeightingNumerator = 0.0;
			for (int segmentNumber = 1; 
					segmentNumber <= this.numberOfSegments; 
					segmentNumber++)
			{
				xsAreaSqWeightingNumerator += 
					DarcyKList[segmentNumber-1]*
					lengthToDiameterList[segmentNumber-1]+
					kSegment;
			}

			///  here I'm calculating
			/// the sum of
			/// (kDarcy*L/D + kForm)/(A^2)

			double dimensionlessAreaSqDenominator = 0.0;
			for (int segmentNumber = 1; 
					segmentNumber <= this.numberOfSegments; 
					segmentNumber++)
			{
				dimensionlessAreaSqDenominator += 
					(DarcyKList[segmentNumber-1]*
					lengthToDiameterList[segmentNumber-1]+
					kSegment)/
					areaSqList[segmentNumber-1].
					As(AreaMomentOfInertiaUnit.
							MeterToTheFourth);
			}

			double getOneOverAreaSq(){
			// now i need to divide it by the sum of
			/// (kDarcy*L/D + kForm)
				double oneOverAreaSq_meter4 =
					dimensionlessAreaSqDenominator/
					xsAreaSqWeightingNumerator;
				double areaSq_meter4 = 
					Math.Pow(oneOverAreaSq_meter4,-1.0);
				return areaSq_meter4;
			}

			double areaSq =
				getOneOverAreaSq();

			Area xsArea =
				new Area(Math.Pow(areaSq,0.5),
						AreaUnit.SquareMeter);
			return xsArea;
		}

		public IList<double> getDarcyKList(
				IList<Length> hydraulicDiameterList){

			IList<double> DarcyKList = new List<double>();
			foreach (Length diameter in hydraulicDiameterList)
			{
				double roughnessRatio = this.getSurfaceRoughness()/
					diameter;
				double kDarcy = this.getFullyTurbulentDarcyK(roughnessRatio);
				DarcyKList.Add(kDarcy);

			}
			return DarcyKList;
		}

		public IList<double> getLengthToDiameterList(IList<Length> lengthList,
				IList<Length> diameterList){

			IList<double> lengthToDiameterList = new List<double>();

			for (int segmentNumber = 1; 
					segmentNumber <= this.numberOfSegments; 
					segmentNumber++)
			{
				lengthToDiameterList.Add(
						lengthList[segmentNumber-1]/
						hydraulicDiameterList[segmentNumber-1]);
			}
			return lengthToDiameterList;
		}

		public abstract Length getSurfaceRoughness();
		public abstract double getFormLossCoefficientK();

		public double getFullyTurbulentDarcyK(double roughnessRatio){
			double oneOverSqrtK;
			oneOverSqrtK = -2.0*Math.Log10(roughnessRatio/3.7);

			return Math.Pow(oneOverSqrtK,-2.0);

		}

		public abstract Density getFluidDensity();

		public abstract KinematicViscosity getFluidKinematicViscosity();

		public abstract DynamicViscosity getFluidDynamicViscosity();

		public Pressure getHydrostaticPressureChange(){
			return Parameters.hydrostaticPressureChange();
		}

		public abstract Angle getInclineAngle();

		public Length getZ(){
			Length heightChange =
				 this.getComponentLength()* 
				 Math.Sin(this.getInclineAngle().
						 As(AngleUnit.Radian));
			return heightChange;
		}

		public virtual IList<Length> getZList(){
			IList<Length> zList =
				new List<Length>();
			// basically the method gets the list of lengths
			// and multiplies each by the incline angle

			IList<Length> lengthList =
				this.lengthList;
			//

			for (int segmentNumber = 1;
					segmentNumber <= this.numberOfSegments;
					segmentNumber++){
				Length heightChange = 
					lengthList[segmentNumber-1]*
					Math.Sin(this.getInclineAngle().As(
								AngleUnit.Radian));
				zList.Add(heightChange);

			}
			return zList;
		}


		public virtual (Length, Length, Length) getCoordinateChange(){
			// for now i consider X  and Z lengths,
			// However, to make this extensible, i leave the method as
			// virtual so it can be overwritten
			Length X =
				 this.getComponentLength()* 
				 Math.Cos(Parameters.inclineAngle.As(AngleUnit.Radian));
			Length Y = new Length(0.0, LengthUnit.Meter);
			Length Z = this.getZ();
			return (X,Y,Z);
		}

		public double getBejanFromPressureDrop(Pressure pressureDrop){
			double Be;
			Be = pressureDrop.As(PressureUnit.Pascal);
			Be *= Math.Pow(this.getHydraulicDiameter().As(LengthUnit.Meter
						),2.0);
			Be /= this.getFluidDynamicViscosity().As(DynamicViscosityUnit.
					PascalSecond);
			Be /= this.getFluidKinematicViscosity().As(KinematicViscosityUnit.
					SquareMeterPerSecond);

			return Be;
		}

		public Pressure getDynamicPressureDropFromBe(double Be){

			Pressure finalPressure =  
				this.getFluidDynamicViscosity().
				ToUnit(DynamicViscosityUnit.PascalSecond) *
				this.getFluidKinematicViscosity().
				ToUnit(KinematicViscosityUnit.SquareMeterPerSecond) /
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter) / 
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter);

			finalPressure *= Be;

			return finalPressure;

		}

		public double getReFromMassFlow(MassFlow flowrate){
			return Parameters.getReynoldsNumber(flowrate);
		}

		public MassFlow getMassFlowRateFromRe(double Re){
			MassFlow finalMassFlow;
			finalMassFlow = this.getXSArea().ToUnit(AreaUnit.SquareMeter) *
				this.getFluidDynamicViscosity().
				ToUnit(DynamicViscosityUnit.PascalSecond) /
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter) *
				Re;

			return finalMassFlow;
		}

		// here are methods and properties to implement IHeatTransferFluidEntity
		//
		// everytime i change the numberOfSegments within the therminolPipe
		// a new list of segment lengths is generated
		// this should NOT change during runtime

		private int _numberOfSegments = 1;
		public virtual int numberOfSegments { 
			get {
				return this._numberOfSegments;
			}
			set {
				if(value <= 0)
					throw new DivideByZeroException("numberOfSegments <= 0");
				this._numberOfSegments = value;
				this.setAllPipeDimensions(value);
				this.setTemperatureList(this.getInitialTemperature());
			}
		}

		private IList<Length> _lengthList;
		public virtual IList<Length> lengthList { 
			get{
				return this._lengthList;
			}

			set{

				// let's do a null check first:
				if (value is null){
					throw new NullReferenceException("lengthList set to null");
				}

				// first i want to check if the 
				// total segment length is equal to the componentLength

				Length totalLength = new Length(0.0, 
						LengthUnit.Meter);
				foreach (Length segmentLength in value)
				{
					totalLength += segmentLength;
				}
				if(totalLength.As(LengthUnit.Meter) !=
						this.getComponentLength().As(LengthUnit.Meter)
						){
					string errorMsg = "The total length in your lengthList \n";
					errorMsg += totalLength.ToString() + "\n";
					errorMsg += "is not equal to the pipe length: \n";
					errorMsg += this.getComponentLength().ToString() + "\n";
					throw new InvalidOperationException(errorMsg);
				}

				this._lengthList = value;
				this.generateHydraulicDiameterList();
			}
		}

		private void generateHydraulicDiameterList(){
			// this function generates a hydraulic diameter list
			// according to the number of segments specified by the user
			// and using those to interpolate the hydraulic diameters along
			// the way linearly
			IList<Length> tempHydraulicDiameterList = new List<Length>();
			for (int segmentNumber = 1; 
					segmentNumber < this.numberOfSegments + 1; 
					segmentNumber++){
				Length segmentDiameter = 
					getSegmentLinearInterpolatedDiameter(segmentNumber);
				tempHydraulicDiameterList.Add(segmentDiameter);
			}

			this.hydraulicDiameterList = tempHydraulicDiameterList;

			return;
		}


		private IList<Length> _hydraulicDiameterList;
		public virtual IList<Length> hydraulicDiameterList { 
			get{
				return this._hydraulicDiameterList;
			}
			private set{
				// first let me check if value is null
				if (value is null){
					throw new NullReferenceException(
							"hydraulicDiameterList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"hydraulicDiameterList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}

				this._hydraulicDiameterList = value;
			}
		}

		// we also use area a LOT, so it's useful to have an areaList too
		private IList<Area> _areaList;
		public virtual IList<Area> areaList { 
			get{
				return this._areaList;
			}
			private set{
				// first let me check if value is null
				if (value is null){
					throw new NullReferenceException(
							"areaList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"areaList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}

				this._areaList = value;
			}
		}
		
		public void generateAreaList(){
			// after generating the hydraulic diameter list
			// we can generate an area list
			IList<Area> temporaryAreaList = new List<Area>();
			foreach (Length hydraulicDiameter in this.hydraulicDiameterList)
			{
				Area segmentArea = 
					hydraulicDiameter.Pow(2);
				segmentArea *= Math.PI/4.0;
				temporaryAreaList.Add(segmentArea);

			}
			this.areaList = temporaryAreaList;

		}

		public void setLengthListUniform(int numberOfSegments){
			// this function helps to evenly split a pipe into
			// n segements given a number of segments
			// so that the user doesn't have to manually set the
			// list of lengths

			Length segmentLength = this.getComponentLength()/ 
				numberOfSegments;

			List<Length> tempLengthList = new List<Length>();


			for (int i = 0; i < numberOfSegments; i++)
			{
				tempLengthList.Add(segmentLength);
			}
			this.lengthList = tempLengthList;

			return;
		}

		public void setAllPipeDimensions(int numberOfSegments){
			// basically this list helps to set all diameters and areas
			// whenever a property of length changes.
			this.setLengthListUniform(numberOfSegments);
			this.generateHydraulicDiameterList();
			this.generateAreaList();

		}

		/**********************************************************************
		 * this section deals with the temperatureList property
		 * by setting temperature list
		 * i should expect some data validation (ie check if you're supplying
		 * a nonsense value for temperature list)
		 * and also automatically set viscosity and density
		 * upon changing temperature
		 *
		 *
		 * I will also force the user to set an initial temperature
		 * for the system to initialise
		 *
		 * ********************************************************************/
		private IList<EngineeringUnits.Temperature> _temperatureList;
		public virtual IList<EngineeringUnits.Temperature> 
			temperatureList { 
				get{
					return this._temperatureList;
				}
				set{
					// add validation
					if (value is null){
						throw new NullReferenceException(
								"temperatureList set to null");
					}
					// next i want to check the number of elements
					// within this list
					if(value.Count != this.numberOfSegments){
						throw new InvalidOperationException(
								"temperatureList needs " +
								this.numberOfSegments.ToString() + 
								" segments, \n" +
								"you only have " +
								value.Count.ToString() +
								" segments \n");
					}

					

					this._temperatureList = value;
					// add setting viscosity method
					this.setViscosityList();
					// add setting density method
					this.setDensityList();
					// add heat capacity setting method
					this.setSpecificHeatCapacityList();
					// add thermal conductivity setting method
					this.setThermalConductivityList();
				}
			}

		public virtual void setTemperatureList(EngineeringUnits.Temperature
				uniformTemperature){
			IList<EngineeringUnits.Temperature> temporaryTemperatureList =
				new List<EngineeringUnits.Temperature>();

			for (int i = 1; i <= this.numberOfSegments; i++)
			{
				temporaryTemperatureList.Add(uniformTemperature);
			}

			this.temperatureList = temporaryTemperatureList;
		}



		public abstract EngineeringUnits.Temperature getInitialTemperature();


		// these are methods to help set the density and viscosity lists
		//
		private IList<Density> _densityList;
		public virtual IList<Density> densityList {
			get{
				return this._densityList;
			}
			private set{

				if (value is null){
					throw new NullReferenceException(
							"densityList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"densityList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}


				this._densityList = value;
			}
		}

		public void setDensityList(){

			IList<Density> temporaryDensityList = 
				new List<Density>();

			foreach (EngineeringUnits.Temperature temperature in 
					this.temperatureList)
			{
				// basically for each temperature in temperature list
				// i get the fluid density and add it to the density list
				temporaryDensityList.Add(this.getFluidDensity(
							temperature));
			}
			this.densityList = temporaryDensityList;
		}
		// here are methods to set viscosity

		private IList<DynamicViscosity> _viscosityList;
		public virtual IList<DynamicViscosity> viscosityList{
			get{
				return this._viscosityList;
			}
			private set{

				if (value is null){
					throw new NullReferenceException(
							"viscosityList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"viscosityList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}


				this._viscosityList = value;
			}
		}

		public void setViscosityList(){

			IList<DynamicViscosity> temporaryDynamicViscosityList = 
				new List<DynamicViscosity>();

			foreach (EngineeringUnits.Temperature temperature in 
					this.temperatureList)
			{
				// basically for each temperature in temperature list
				// i get the fluid density and add it to the density list
				temporaryDynamicViscosityList.Add(this.getFluidDynamicViscosity(
							temperature));
			}
			this.viscosityList = temporaryDynamicViscosityList;
		}


		// and now we also need to do pretty much the same for thermal
		// conductivity and heat capacity due to us needing to figure out
		// prandtl number

		private IList<ThermalConductivity> _thermalConductivityList;
		public virtual IList<ThermalConductivity> thermalConductivityList{
			get{
				return this._thermalConductivityList;
			}
			private set{

				if (value is null){
					throw new NullReferenceException(
							"thermalConductivityList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"thermalConductivityList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}


				this._thermalConductivityList = value;
			}
		}

		public void setThermalConductivityList(){

			IList<ThermalConductivity> temporaryThermalConductivityList = 
				new List<ThermalConductivity>();

			foreach (EngineeringUnits.Temperature temperature in 
					this.temperatureList)
			{
				// basically for each temperature in temperature list
				// i get the fluid density and add it to the density list
				temporaryThermalConductivityList.
					Add(this.getFluidThermalConductivity(
							temperature));
			}
			this.thermalConductivityList = temporaryThermalConductivityList;
		}

		// now we do the same for heat capacity:
		private IList<SpecificHeatCapacity> _heatCapacityList;
		public virtual IList<SpecificHeatCapacity> heatCapacityList{
			get{
				return this._heatCapacityList;
			}
			private set{

				if (value is null){
					throw new NullReferenceException(
							"heatCapacityList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"heatCapacityList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}


				this._heatCapacityList = value;
			}
		}

		public void setSpecificHeatCapacityList(){

			IList<SpecificHeatCapacity> temporarySpecificHeatCapacityList = 
				new List<SpecificHeatCapacity>();

			foreach (EngineeringUnits.Temperature temperature in 
					this.temperatureList)
			{
				// basically for each temperature in temperature list
				// i get the fluid density and add it to the density list
				temporarySpecificHeatCapacityList.
					Add(this.getFluidHeatCapacity(
							temperature));
			}
			this.heatCapacityList = temporarySpecificHeatCapacityList;
		}


		// now for this i'm going to initiate a new therminol class
		// return the density
		// and then delete everything
		//
		// this may not be efficient, but in case of multithreading,
		// it's more thread safe

		// basically i'm making a therminol object and finding the
		// properties at atmospheric pressure and specific fluid Temp
		// i've already tested that the fluid properties are pressure
		// invariant so that's ok
		public Density getFluidDensity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Density.ToUnit(DensityUnit.KilogramPerCubicMeter);
		}

		public KinematicViscosity getFluidKinematicViscosity(EngineeringUnits.Temperature 
				fluidTemp){
			KinematicViscosity fluidKinematicViscosity;
			fluidKinematicViscosity = this.getFluidDynamicViscosity(fluidTemp)/ 
				this.getFluidDensity(fluidTemp);
			return fluidKinematicViscosity;
		}

		public DynamicViscosity getFluidDynamicViscosity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.DynamicViscosity.ToUnit(DynamicViscosityUnit.
					PascalSecond);
		}

		// the fluid ThermalConductivity should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract ThermalConductivity getFluidThermalConductivity();


		public ThermalConductivity getFluidThermalConductivity(
				EngineeringUnits.Temperature fluidTemp){

			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Conductivity.ToUnit(ThermalConductivityUnit.
					WattPerMeterKelvin);
		}


		// the fluid SpecificHeatCapacity should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract SpecificHeatCapacity getFluidHeatCapacity();

		public SpecificHeatCapacity getFluidHeatCapacity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Cp.ToUnit(SpecificHeatCapacityUnit.
					JoulePerKilogramKelvin);
		}



		// the fluid prandtl number should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract double getFluidPrandtl();

		public double getFluidPrandtl(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Prandtl;
		}

    }
}
