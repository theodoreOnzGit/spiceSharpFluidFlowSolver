using SpiceSharp.Behaviors;
using SpiceSharp.Components.TherminolPipeBehaviors;
using SpiceSharp.ParameterSets;
using SpiceSharp.Simulations;
using EngineeringUnits;
using EngineeringUnits.Units;
using SharpFluids;

namespace SpiceSharp.Components
{
    /// <summary>
    /// An abstract base class for all Therminol Based Components
    /// </summary>
    /// <seealso cref="Component" />
    public abstract class TherminolPipe : Component,
        IParameterized<BaseParameters>,
		SpiceSharp.Entities.IFluidEntity,
		SpiceSharp.Entities.IHeatTransferFluidEntity
    {

		// copied this from the nonlinear resistor, don't change!
		// but modified this to make it work without all that
		// autogenerated code
        public SpiceSharp.Components.TherminolPipeBehaviors.BaseParameters 
			Parameters { get; set; } 
		= new SpiceSharp.Components.TherminolPipeBehaviors.BaseParameters();


		// copied this from the nonlinear resistor, don't change!
        public TherminolPipe(string name, string nodeA, string nodeB) : base(name, 2)
        {
            Connect(nodeA, nodeB);
			// i'm going to set some defaults for this system
        }

		// Now, I want a constructor that can work without connecting
		// node A to B
        public TherminolPipe(string name) : base(name, 2){
			Console.WriteLine("\n Please Remember to call the Connect(inlet,outlet) method)\n");
			Console.WriteLine("ie ObjectName.Connect('inletName','outletName'); \n");
			// i'm going to set some defaults for this system
		}


		// copied this from the nonlinear resistor, don't change!
        public override void CreateBehaviors(ISimulation simulation)
        {
            var behaviors = new BehaviorContainer(Name);
            var context = new ComponentBindingContext(this, simulation, behaviors);
            if (simulation.UsesBehaviors<IBiasingBehavior>())
                behaviors.Add(new BiasingBehavior(Name, context));
            simulation.EntityBehaviors.Add(behaviors);
        }


		// these two additional methods fulfil the IFluidEntity 
		// interface
		// Warning: none of these methods are thread safe. 
		// only one method should be used at one time per instance

		public Pressure getPressureDrop(MassFlow massFlowrate){
			return Parameters.getPressureDrop(massFlowrate);
		}

		public SpecificEnergy getKinematicPressureDrop(
				MassFlow massFlowrate){
			return Parameters.getKinematicPressureDrop(massFlowrate);
		}

		public MassFlow getMassFlowRate(SpecificEnergy kinematicPressureDrop){
			// this supposes that a kinematicPressureDrop is supplied over this pipe
			// and we want to get the mass flowrate straightaway.
			
			return Parameters.getMassFlowRate(kinematicPressureDrop);
		}

		public MassFlow getMassFlowRate(Pressure dynamicPressureDrop){
			return Parameters.getMassFlowRate(dynamicPressureDrop);
		}


		public abstract Length componentLength { get; set; }

		public virtual Length getComponentLength(){
			return this.componentLength;
		}

		public abstract Length getHydraulicDiameter();

		public virtual Area getXSArea(){
			Area xsArea = this.getHydraulicDiameter().Pow(2);
			xsArea *= (1.0/4.0)*Math.PI;
			return xsArea;
		}

		public abstract Density getFluidDensity();

		public abstract KinematicViscosity getFluidKinematicViscosity();

		public abstract DynamicViscosity getFluidDynamicViscosity();

		public Pressure getHydrostaticPressureChange(){
			return Parameters.hydrostaticPressureChange();
		}

		public Length getZ(){
			Length heightChange =
				 this.getComponentLength()* 
				 Math.Sin(Parameters.inclineAngle.As(AngleUnit.Radian));
			return heightChange;
		}


		public virtual (Length, Length, Length) getCoordinateChange(){
			// for now i consider X  and Z lengths,
			// However, to make this extensible, i leave the method as
			// virtual so it can be overwritten
			Length X =
				 this.getComponentLength()* 
				 Math.Cos(Parameters.inclineAngle.As(AngleUnit.Radian));
			Length Y = new Length(0.0, LengthUnit.Meter);
			Length Z = this.getZ();
			return (X,Y,Z);
		}

		public double getBejanFromPressureDrop(Pressure pressureDrop){
			double Be;
			Be = pressureDrop.As(PressureUnit.Pascal);
			Be *= Math.Pow(this.getHydraulicDiameter().As(LengthUnit.Meter
						),2.0);
			Be /= this.getFluidDynamicViscosity().As(DynamicViscosityUnit.
					PascalSecond);
			Be /= this.getFluidKinematicViscosity().As(KinematicViscosityUnit.
					SquareMeterPerSecond);

			return Be;
		}

		public Pressure getDynamicPressureDropFromBe(double Be){

			Pressure finalPressure =  
				this.getFluidDynamicViscosity().
				ToUnit(DynamicViscosityUnit.PascalSecond) *
				this.getFluidKinematicViscosity().
				ToUnit(KinematicViscosityUnit.SquareMeterPerSecond) /
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter) / 
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter);

			finalPressure *= Be;

			return finalPressure;

		}

		public double getReFromMassFlow(MassFlow flowrate){
			return Parameters.getReynoldsNumber(flowrate);
		}

		public MassFlow getMassFlowRateFromRe(double Re){
			MassFlow finalMassFlow;
			finalMassFlow = this.getXSArea().ToUnit(AreaUnit.SquareMeter) *
				this.getFluidDynamicViscosity().
				ToUnit(DynamicViscosityUnit.PascalSecond) /
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter) *
				Re;

			return finalMassFlow;
		}

		// here are methods and properties to implement IHeatTransferFluidEntity
		//
		// everytime i change the numberOfSegments within the therminolPipe
		// a new list of segment lengths is generated

		private int _numberOfSegments;
		public virtual int numberOfSegments { 
			get {
				return this._numberOfSegments;
			}
			set {
				this._numberOfSegments = value;
				this.setLengthListUniform(value);
			}
		}

		public virtual IList<Length> lengthList { get; set; }

		private void setLengthListUniform(int numberOfSegments){
			// this function helps to evenly split a pipe into
			// n segements given a number of segments
			// so that the user doesn't have to manually set the
			// list of lengths

			Length segmentLength = this.getComponentLength()/ 
				numberOfSegments;
			// i will clear the lengthlist and make a new lengthlist
			this.lengthList = null;
			this.lengthList = new List<Length>();

			for (int i = 0; i < numberOfSegments; i++)
			{
				this.lengthList.Add(segmentLength);
			}

			return;
		}

		public abstract IList<EngineeringUnits.Temperature> 
			temperatureList { get; set; }

		// now for this i'm going to initiate a new therminol class
		// return the density
		// and then delete everything
		//
		// this may not be efficient, but in case of multithreading,
		// it's more thread safe

		// basically i'm making a therminol object and finding the
		// properties at atmospheric pressure and specific fluid Temp
		// i've already tested that the fluid properties are pressure
		// invariant so that's ok
		public Density getFluidDensity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Density.ToUnit(DensityUnit.KilogramPerCubicMeter);
		}

		public KinematicViscosity getFluidKinematicViscosity(EngineeringUnits.Temperature 
				fluidTemp){
			KinematicViscosity fluidKinematicViscosity;
			fluidKinematicViscosity = this.getFluidDynamicViscosity(fluidTemp)/ 
				this.getFluidDensity(fluidTemp);
			return fluidKinematicViscosity;
		}

		public DynamicViscosity getFluidDynamicViscosity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.DynamicViscosity.ToUnit(DynamicViscosityUnit.
					PascalSecond);
		}

		// the fluid ThermalConductivity should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract ThermalConductivity getFluidThermalConductivity();


		public ThermalConductivity getFluidThermalConductivity(
				EngineeringUnits.Temperature fluidTemp){

			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Conductivity.ToUnit(ThermalConductivityUnit.
					WattPerMeterKelvin);
		}


		// the fluid SpecificHeatCapacity should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract SpecificHeatCapacity getFluidHeatCapacity();

		public SpecificHeatCapacity getFluidHeatCapacity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Cp.ToUnit(SpecificHeatCapacityUnit.
					JoulePerKilogramKelvin);
		}



		// the fluid prandtl number should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract double getFluidPrandtl();

		public double getFluidPrandtl(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Prandtl;
		}





















    }
}
