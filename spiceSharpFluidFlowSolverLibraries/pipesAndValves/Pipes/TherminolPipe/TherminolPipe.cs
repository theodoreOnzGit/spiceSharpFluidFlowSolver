using SpiceSharp.Behaviors;
using SpiceSharp.Components.TherminolPipeBehaviors;
using SpiceSharp.ParameterSets;
using SpiceSharp.Simulations;
using EngineeringUnits;
using EngineeringUnits.Units;
using SharpFluids;

namespace SpiceSharp.Components
{
    /// <summary>
    /// An abstract base class for all Therminol Based Components
    /// </summary>
    /// <seealso cref="Component" />
    public abstract class TherminolPipe : Component,
        IParameterized<BaseParameters>,
		SpiceSharp.Entities.IFluidEntity,
		SpiceSharp.Entities.IHeatTransferFluidEntity
    {

		// copied this from the nonlinear resistor, don't change!
		// but modified this to make it work without all that
		// autogenerated code
        public SpiceSharp.Components.TherminolPipeBehaviors.BaseParameters 
			Parameters { get; set; } 
		= new SpiceSharp.Components.TherminolPipeBehaviors.BaseParameters();


		// copied this from the nonlinear resistor, don't change!
        public TherminolPipe(string name, string nodeA, string nodeB) : base(name, 2)
        {
            Connect(nodeA, nodeB);
			this.setComponentLength();
			this.setHydraulicDiameters();
			// i'm going to set some defaults for this system
        }

		// Now, I want a constructor that can work without connecting
		// node A to B
        public TherminolPipe(string name) : base(name, 2){
			this.setComponentLength();
			this.setHydraulicDiameters();
			Console.WriteLine("\n Please Remember to call the Connect(inlet,outlet) method)\n");
			Console.WriteLine("ie ObjectName.Connect('inletName','outletName'); \n");
			// i'm going to set some defaults for this system
		}


		// copied this from the nonlinear resistor, don't change!
        public override void CreateBehaviors(ISimulation simulation)
        {
            var behaviors = new BehaviorContainer(Name);
            var context = new ComponentBindingContext(this, simulation, behaviors);
            if (simulation.UsesBehaviors<IBiasingBehavior>())
                behaviors.Add(new BiasingBehavior(Name, context));
            simulation.EntityBehaviors.Add(behaviors);
        }


		// these two additional methods fulfil the IFluidEntity 
		// interface
		// Warning: none of these methods are thread safe. 
		// only one method should be used at one time per instance

		public Pressure getPressureDrop(MassFlow massFlowrate){
			return Parameters.getPressureDrop(massFlowrate);
		}

		public SpecificEnergy getKinematicPressureDrop(
				MassFlow massFlowrate){
			return Parameters.getKinematicPressureDrop(massFlowrate);
		}

		public MassFlow getMassFlowRate(SpecificEnergy kinematicPressureDrop){
			// this supposes that a kinematicPressureDrop is supplied over this pipe
			// and we want to get the mass flowrate straightaway.
			
			return Parameters.getMassFlowRate(kinematicPressureDrop);
		}

		public MassFlow getMassFlowRate(Pressure dynamicPressureDrop){
			return Parameters.getMassFlowRate(dynamicPressureDrop);
		}


		private Length _componentLength;
		public virtual Length componentLength { 
			get{
				return this._componentLength;
			}
			set{
				if(value.As(LengthUnit.Meter) <= 0)
					throw new InvalidOperationException("diameter <= 0 m");
				this._componentLength = value;
				this.setLengthListUniform(this.numberOfSegments);
			}
		}

		// you must set the componentLength property below
		public abstract void setComponentLength();

		public virtual Length getComponentLength(){
			return this.componentLength;
		}


		// you must set the entranceHydraulicDiameter and
		// exitHydraulicDiameter properties in the method below...
		public abstract void setHydraulicDiameters();

		public virtual Length getHydraulicDiameter(){
			return (this.entranceHydraulicDiameter + 
					this.exitHydraulicDiameter)/2.0;
		}



		/**********************************************************************
		 * This section contains data to help deal with pipes which may have
		 * different entrance and exit areas or hydraulic diameters.
		 * 
		 * i have two properties, entrance and exit hydraulic diameters,
		 * i want it to autocalculate the diameterList once i set the properties
		 * but at the same time i want a compiler error if the user doesn't
		 * set it at all
		 *
		 * Thus i will just leave getHydraulicDiameter() as abstract
		 * but entrance and exit hydraulic diameter is virtual
		 *
		 *
		 * ********************************************************************/

		private Length _entranceHydraulicDiameter
			= new Length(2.79e-2,LengthUnit.Meter);
		public virtual Length entranceHydraulicDiameter { 
			get{
				return this._entranceHydraulicDiameter;
			}
			set{
				if(value.As(LengthUnit.Meter) <= 0)
					throw new InvalidOperationException("diameter <= 0 m");
				this._entranceHydraulicDiameter = value;
				this.setLengthListUniform(this.numberOfSegments);
			}
		}

		private Length _exitHydraulicDiameter
			= new Length(2.79e-2, LengthUnit.Meter);
		public virtual Length exitHydraulicDiameter { 
			get{
				return this._exitHydraulicDiameter;
			}
			set{
				if(value.As(LengthUnit.Meter) <= 0)
					throw new InvalidOperationException("diameter <= 0 m");
				this._exitHydraulicDiameter = value;
				this.setLengthListUniform(this.numberOfSegments);
			}
		}

		private Length getSegmentInterpolationLength(int segmentNumber){
			return this.getComponentLength()/this.numberOfSegments 
				*(segmentNumber - 0.5);
		}

		private Length getSegmentLinearInterpolatedDiameter(int segmentNumber){
			double interpolationSlope;
			interpolationSlope = (this.exitHydraulicDiameter 
					- this.entranceHydraulicDiameter)/(
						this.getComponentLength() - 
						this.entranceLengthValue);

			Length interpolationLength = this.getSegmentInterpolationLength(
					segmentNumber);

			return (interpolationLength - 
					this.entranceLengthValue)*interpolationSlope
				+ entranceHydraulicDiameter;

		}

		public virtual Length entranceLengthValue { get; set; } = 
			new Length(0.0, LengthUnit.Meter);

		public virtual Area getXSArea(){
			Area xsArea = this.getHydraulicDiameter().Pow(2);
			xsArea *= (1.0/4.0)*Math.PI;
			return xsArea;
		}

		public abstract Density getFluidDensity();

		public abstract KinematicViscosity getFluidKinematicViscosity();

		public abstract DynamicViscosity getFluidDynamicViscosity();

		public Pressure getHydrostaticPressureChange(){
			return Parameters.hydrostaticPressureChange();
		}

		public Length getZ(){
			Length heightChange =
				 this.getComponentLength()* 
				 Math.Sin(Parameters.inclineAngle.As(AngleUnit.Radian));
			return heightChange;
		}


		public virtual (Length, Length, Length) getCoordinateChange(){
			// for now i consider X  and Z lengths,
			// However, to make this extensible, i leave the method as
			// virtual so it can be overwritten
			Length X =
				 this.getComponentLength()* 
				 Math.Cos(Parameters.inclineAngle.As(AngleUnit.Radian));
			Length Y = new Length(0.0, LengthUnit.Meter);
			Length Z = this.getZ();
			return (X,Y,Z);
		}

		public double getBejanFromPressureDrop(Pressure pressureDrop){
			double Be;
			Be = pressureDrop.As(PressureUnit.Pascal);
			Be *= Math.Pow(this.getHydraulicDiameter().As(LengthUnit.Meter
						),2.0);
			Be /= this.getFluidDynamicViscosity().As(DynamicViscosityUnit.
					PascalSecond);
			Be /= this.getFluidKinematicViscosity().As(KinematicViscosityUnit.
					SquareMeterPerSecond);

			return Be;
		}

		public Pressure getDynamicPressureDropFromBe(double Be){

			Pressure finalPressure =  
				this.getFluidDynamicViscosity().
				ToUnit(DynamicViscosityUnit.PascalSecond) *
				this.getFluidKinematicViscosity().
				ToUnit(KinematicViscosityUnit.SquareMeterPerSecond) /
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter) / 
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter);

			finalPressure *= Be;

			return finalPressure;

		}

		public double getReFromMassFlow(MassFlow flowrate){
			return Parameters.getReynoldsNumber(flowrate);
		}

		public MassFlow getMassFlowRateFromRe(double Re){
			MassFlow finalMassFlow;
			finalMassFlow = this.getXSArea().ToUnit(AreaUnit.SquareMeter) *
				this.getFluidDynamicViscosity().
				ToUnit(DynamicViscosityUnit.PascalSecond) /
				this.getHydraulicDiameter().
				ToUnit(LengthUnit.Meter) *
				Re;

			return finalMassFlow;
		}

		// here are methods and properties to implement IHeatTransferFluidEntity
		//
		// everytime i change the numberOfSegments within the therminolPipe
		// a new list of segment lengths is generated

		private int _numberOfSegments = 1;
		public virtual int numberOfSegments { 
			get {
				return this._numberOfSegments;
			}
			set {
				if(value <= 0)
					throw new DivideByZeroException("numberOfSegments <= 0");
				this._numberOfSegments = value;
				this.setLengthListUniform(value);
			}
		}

		private IList<Length> _lengthList;
		public virtual IList<Length> lengthList { 
			get{
				return this._lengthList;
			}

			set{

				// let's do a null check first:
				if (value is null){
					throw new NullReferenceException("lengthList set to null");
				}

				// first i want to check if the 
				// total segment length is equal to the componentLength

				Length totalLength = new Length(0.0, 
						LengthUnit.Meter);
				foreach (Length segmentLength in value)
				{
					totalLength += segmentLength;
				}
				if(totalLength.As(LengthUnit.Meter) !=
						this.getComponentLength().As(LengthUnit.Meter)
						){
					string errorMsg = "The total length in your lengthList \n";
					errorMsg += totalLength.ToString() + "\n";
					errorMsg += "is not equal to the pipe length: \n";
					errorMsg += this.getComponentLength().ToString() + "\n";
					throw new InvalidOperationException(errorMsg);
				}

				this._lengthList = value;
				this.generateHydraulicDiameterList();
			}
		}

		private void generateHydraulicDiameterList(){
			// this function generates a hydraulic diameter list
			// according to the number of segments specified by the user
			// and using those to interpolate the hydraulic diameters along
			// the way linearly
			IList<Length> tempHydraulicDiameterList = new List<Length>();
			for (int segmentNumber = 1; 
					segmentNumber < this.numberOfSegments + 1; 
					segmentNumber++)
			{
				Length segmentDiameter = 
					getSegmentLinearInterpolatedDiameter(segmentNumber);
				tempHydraulicDiameterList.Add(segmentDiameter);
			}

			this.hydraulicDiameterList = tempHydraulicDiameterList;

			return;
		}


		private IList<Length> _hydraulicDiameterList;
		public virtual IList<Length> hydraulicDiameterList { 
			get{
				return this._hydraulicDiameterList;
			}
			private set{
				// first let me check if value is null
				if (value is null){
					throw new NullReferenceException(
							"hydraulicDiameterList set to null");
				}
				// next i want to check the number of elements
				// within this list
				if(value.Count != this.numberOfSegments){
					throw new InvalidOperationException(
							"hydraulicDiameterList needs " +
							this.numberOfSegments.ToString() + 
							" segments, \n" +
							"you only have " +
							value.Count.ToString() +
							" segments \n");
				}

				this._hydraulicDiameterList = value;
			}
		}


		public void setLengthListUniform(int numberOfSegments){
			// this function helps to evenly split a pipe into
			// n segements given a number of segments
			// so that the user doesn't have to manually set the
			// list of lengths

			Length segmentLength = this.getComponentLength()/ 
				numberOfSegments;

			List<Length> tempLengthList = new List<Length>();


			for (int i = 0; i < numberOfSegments; i++)
			{
				tempLengthList.Add(segmentLength);
			}
			this.lengthList = tempLengthList;

			return;
		}

		public abstract IList<EngineeringUnits.Temperature> 
			temperatureList { get; set; }

		// now for this i'm going to initiate a new therminol class
		// return the density
		// and then delete everything
		//
		// this may not be efficient, but in case of multithreading,
		// it's more thread safe

		// basically i'm making a therminol object and finding the
		// properties at atmospheric pressure and specific fluid Temp
		// i've already tested that the fluid properties are pressure
		// invariant so that's ok
		public Density getFluidDensity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Density.ToUnit(DensityUnit.KilogramPerCubicMeter);
		}

		public KinematicViscosity getFluidKinematicViscosity(EngineeringUnits.Temperature 
				fluidTemp){
			KinematicViscosity fluidKinematicViscosity;
			fluidKinematicViscosity = this.getFluidDynamicViscosity(fluidTemp)/ 
				this.getFluidDensity(fluidTemp);
			return fluidKinematicViscosity;
		}

		public DynamicViscosity getFluidDynamicViscosity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.DynamicViscosity.ToUnit(DynamicViscosityUnit.
					PascalSecond);
		}

		// the fluid ThermalConductivity should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract ThermalConductivity getFluidThermalConductivity();


		public ThermalConductivity getFluidThermalConductivity(
				EngineeringUnits.Temperature fluidTemp){

			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Conductivity.ToUnit(ThermalConductivityUnit.
					WattPerMeterKelvin);
		}


		// the fluid SpecificHeatCapacity should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract SpecificHeatCapacity getFluidHeatCapacity();

		public SpecificHeatCapacity getFluidHeatCapacity(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Cp.ToUnit(SpecificHeatCapacityUnit.
					JoulePerKilogramKelvin);
		}



		// the fluid prandtl number should be abstract since if we
		// want to find average prandtl number, it should be defined on a per
		// component basis
		public abstract double getFluidPrandtl();

		public double getFluidPrandtl(EngineeringUnits.Temperature 
				fluidTemp){
			Fluid therminol = new Fluid(FluidList.InCompTherminolVP1);
			Pressure referencePressure = new Pressure(1.013e5, PressureUnit.Pascal);
			therminol.UpdatePT(referencePressure, fluidTemp);
			return therminol.Prandtl;
		}





















    }
}
